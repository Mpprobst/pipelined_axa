; test branch and jumps separately
xor $1, $1
llo $2, 6	; instruction target for t1
bz $1, 2		; if true skips sys
sys
jz $1, $2 
sys
; t1
llo $3, 10	; sets target for t2
ex $3, @$1
jz $3, @$1
sys

; t2 now test bnz add 11 to targets
add $1, 1
llo $2, 16	; instruction target for t3
bnz $1, 2
sys
jnz $1, $2
sys
; t3
llo $3, 20
ex $3, @$1
jnz $3, @$1
sys

; t4 now test bnn add 12 to t2 targets
llo $2, 26
xor $1, $1
bnn $1, 2
sys
jnn $0, $2
sys
; t5
llo $3, 30
ex $3, @$1
jnn $3, @$1
sys

; ALU testing  WAW dependencies are all over the place
; set initial memory values
llo $1, 2
llo $2, 8
llo $3, 3
ex $1, @$1
ex $2, @$2
ex $3, @$3

l16 $1, 256
xhi $1, 1	; $1 = 0
xlo $1, 8	; $1 should equal 8
l16 $2, 1
llo $2, 0
lhi $2, 1		; $2 should be 256
add $1,$2	; $1 should be 256+8 also a RAW dependency
add $1,1	; $1 should be 265
add $1,@$1	; @$1 will be 2, $1 should equal 267
sub $1,$2	; $1 should equal 11
sub $1,6	; $1 should be 5
sub $1,@$1	; $1 should be 3
xor $2, $2	; clears out $2 	
xor $2, 8	; WAR dependency
xor $2, @$2	; @$2 will be 8
ex $1, @$3	;  @$3 was 3, should now be 8
rol $2, $1	; 8 rol 4. $2 will be 128
rol $2, 9	; 128 rol 9 = 1
rol $1, @$3	; 8 rol 8 = 2048
shr $1, $2	; $1 will be 1024
shr $1, 8	; $1 will be 4
shr $2, @$1	; clears out $2
l16 $3, 1
or $3, $1	; $3 will be 5
or $3, 3		; $3 will be 7
or $2, @$3	; $2 will be 8
and $3, $2	; $3 becomes 7 also a WAR dependency
and $2, 3	; $2 will be 3
and $3, @$1	; $3 will be 1
dup $2, $3	; $2 will be 1
dup $2, 2	; $2 will be 2	
dup $2, @$1	; $2 will be 1


